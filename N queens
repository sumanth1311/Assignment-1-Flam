def solveNQueens(n):
    def is_safe(row, col):
        return col not in cols and (row - col) not in diag1 and (row + col) not in diag2

    def backtrack(row):
        if row == n:
            board = [''.join(r) for r in state]
            res.append(board)
            return
        for col in range(n):
            if is_safe(row, col):
                state[row][col] = 'Q'
                cols.add(col)
                diag1.add(row - col)
                diag2.add(row + col)
                backtrack(row + 1)
                # Undo the move
                state[row][col] = '.'
                cols.remove(col)
                diag1.remove(row - col)
                diag2.remove(row + col)

    res = []
    state = [['.'] * n for _ in range(n)]
    cols = set()      # Columns with a queen
    diag1 = set()     # "/" diagonals (row - col)
    diag2 = set()     # "\" diagonals (row + col)
    backtrack(0)
    return res
